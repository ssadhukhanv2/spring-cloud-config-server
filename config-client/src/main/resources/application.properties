#logging.level.root=DEBUG
#spring.cloud.config.import-check.enabled=false

# By default config client checks if the relevant spring-cloud-config-server configuration is present
# and whether it's able to connect to it
# The below line disables the check
# spring.cloud.config.enabled=false

#Define the Config Server
spring.config.import=optional:configserver:http://localhost:8888/

limits-service.min=50
limits-service.max=200


# By default this spring.application.name is used to call the config-server endpoint
# http://localhost:8888/limit-service/default
# So we update the application name to the name of the property file in the git repository
spring.application.name=limit-service



#spring.profiles.active is not required here
#spring.profiles.active=qa

#The below is used to tell spring
#which spring.profile to call the config-server endpoint with
# http://localhost:8888/limit-service/dev
# This would load limit-service-dev.properties from the git repository configured in
# config-client

spring.cloud.config.profile=qa

# You can also directly select  profiles from command line using the below command
#java -jar config-client-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev
# Incase there are more than one profile is active, the last profile is picked up
spring.profiles.active=qa


# spring.cloud.config.profile & spring.profiles.active may be separate

management.endpoints.web.exposure.include=*